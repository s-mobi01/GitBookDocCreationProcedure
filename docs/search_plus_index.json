{"./":{"url":"./","title":"Introduction","keywords":"","body":"GitBookドキュメントの作成手順 Rev. 作成日 R0.00 2019/07/10 来歴 Rev. 作成日 変更内容 R0.00 2019/07/10 新規作成 "},"src/md/chpt0000.html":{"url":"src/md/chpt0000.html","title":"はじめに","keywords":"","body":"はじめに 本書は、Markdown形式で記述したドキュメントをGitBookとしてwebsite公開するための手順書である。 "},"src/md/chpt0100.html":{"url":"src/md/chpt0100.html","title":"GitBookの種類について","keywords":"","body":"GitBookの種類について GitBookの種類について以下に示す。 websiteによる公開 作成したMarkdownコンテンツファイルをwebsiteに公開する。 公開するための方法については、大まかに以下の種類がある。 # GitBook作成方法 公開URL データソース ブランチ １ ローカル編集後、GitBookクライアントでビルド https://ユーザ名.github.io/doc-name/ https://github.com/ユーザ名/doc-name/ master/docs ２ ↑ ↑ ↑ gh-pages ３ https://app.gitbook.com/で編集したもの https://ユーザ名.gitbook.io/doc-name/ https://app.gitbook.com/ユーザ名/spaces ※2 - ※1 doc-name：リポジトリ名（ドキュメント名） ※2 設定により、さらにgithub.comへのリンクとなるが省略 本書では、上記#1の方法について記述するものである。 ebookファイルによる出力 作成したMarkdownコンテンツファイルをpdf、epub、mobi形式ファイルとして出力する。 "},"src/md/chpt0200.html":{"url":"src/md/chpt0200.html","title":"前提条件","keywords":"","body":"前提条件 本書は、Windowsを対象とした手順書としている。他OSについては別途考察が必要となる。 必要なモジュール 必要なモジュールを以下に示す。 # 内容 条件 備考 1 Gitインストール済みであること 必須 ※ 2 Node.jsインストール済みであること 必須 ※ 3 NPMがインストール済みであること 必須 ※ 4 Calibre（電子書籍ソフトウェア）がインストール済みであること 任意 ebook形式出力の場合に必要。ebook形式出力をしない場合は不要。 ※未インストールの場合、以下（URL: https://synerex.github.io/SynerexHowToInstall）を参考にインストールをしておくこと。 その他 その他条件を以下に示す。 # 内容 条件 備考 1 Gitアカウントがあること 必須 - 2 NPMアカウントがあること 任意 ノードモジュール登録の際に必要。ノードモジュールの作成・登録をしない場合は不要。 "},"src/md/chpt0300.html":{"url":"src/md/chpt0300.html","title":"GitBookクライアントのインストール","keywords":"","body":"GitBookクライアントのインストール GitBookはMarkdown形式で記述し、Gitで管理しているドキュメントを簡単にHTMLやPDFなどで公開できるサービスである。 GitBookクライアントは、ローカルで編集したドキュメントを公開するための形式にビルドするためのパッケージである。 インストール済み確認 コマンドプロンプトで以下のコマンドを実行し、GitBookクライアントがインストールされていることを確認する。 > gitbook --version バージョン表示で失敗する場合、以下インストールを実施する。 インストール コマンドプロンプトで以下のコマンドを実行し、GitBookクライアントをインストールする。 > npm install -g gitbook 処理終了後、前項に従い、バージョンが正しく表示されることを確認する。 "},"src/md/chpt0400.html":{"url":"src/md/chpt0400.html","title":"GitBookプロジェクト","keywords":"","body":"GitBookプロジェクト GitBookのプロジェクトについて説明する。 プロジェクト作成 コマンドプロンプトで以下のコマンドを実行し、新規プロジェクトを作成する。 > mkdir NewProject ← 新プロジェクトのディレクトリ作成（名称は任意） > cd NewProject ← カレント移動 > gitbook init ← プロジェクトの初期化 ディレクトリ構成 GitBookプロジェクトのフォルダ構成は以下のとおりである。（前項処理後の結果ではない） （ディレクトリ構成は任意で変更可能。説明はサンプルであり、実際には各プロジェクトに合わせ検討の事） # 名称 種類 内容 1 docs ディレクトリ ビルド結果格納先（ココが公開対象になる） 2 node_modules ↑ プラグイン格納先 3 src / contents / etc. ↑ コンテンツ格納フォルダ（名称は任意。必須フォルダではないが、あった方がファイル管理しやすい）章分け、画像、などサブフォルダで管理することも可。 4 styles ↑ スタイルシートファイル格納先 5 .gitignore ファイル Git追跡無効ファイル定義 6 book.json ↑ GitBookプロジェクト設定ファイル 7 README.md ↑ 初期ページファイル（本に例えると、表紙や見開きのようなもの） 8 SUMMARY.md ↑ 目次ファイル プロジェクト設定ファイル プロジェクト設定ファイル book.jsonを以下のように編集する 。デフォルトではファイルが存在しないため、新規にファイルを作成する。 （説明はサンプル） { \"title\": \"hoge User's Guide\", ← タイトル \"description\": \"\", ← 説明 \"language\": \"ja\" ← 日本語 } コンテンツ作成 コンテンツのファイルはプロジェクト直下に置いても良いが、ファイル煩雑化やさらなるサブコンテンツのことを考慮し、トップページ（目次ファイル、初期ページファイル）以外は別ディレクトリへファイルを配置した方がわかりやすい。（例：contentsディレクトリ、srcディレクトリ） コンテンツ作成にあたり、以下の点に注意すること。 mdファイルの文字コードが、エンコード種別=UTF-８、改行=LFでない場合、文字化けすることがあるので、注意すること。 ファイル名称は、8.3形式の名称付与基準を用いること。（デバッグでは問題が無くても、GitHub pagesでファイルが認識できない場合があるため。） 目次ファイル 目次ファイル SUMMARY.mdを作成するコンテンツの内容に合わせ編集する 。 （以下説明はサンプル） # Summary ## 序文 * [この資料について](README.md) * [対象読者](README.md#対象読者) ←※ HTMLリンクに「#」を使っている * [免責](README.md#免責) ←※ HTMLリンクに「#」を使っている ## 本文 * [1. 前提条件](contents/body01/body01-1.md) * [2. ○○について](contents/body02/body02-1.md) *[○○概要](contents/body02/body02-2.md) *[○○詳細](contents/body02/body02-3.md) * [3. ××について](contents/body02/body03-1.md) *[××概要](contents/body02/body03-2.md) *[××詳細](contents/body02/body03-3.md) ## 結文 * [おわりに](contents/body99/body99-1.md) HTMLリンク「#」を使用すると以下の現象が発生することがある。使用する場合は、現象を考慮して使用すること。 HTMLリンクの名称に「半角／全角」混在、スペース文字使用がある場合、リンク先へジャンプしない。 GitBook表示のページ移動「＜」「＞」キーのリンク先不正によりキー無効となる。 目次ファイル編集後、再度以下のコマンドを実行すると、目次ファイルの内容に従いコンテンツの格納フォルダや、初期コンテンツファイルが自動で作成される。（手動で作成したい場合は不要） > gitbook init 初期ページファイル 初期ページファイル README.mdは、本に例えると、表紙や見開きのようなものである。作成するコンテンツの内容に合わせ編集する 。 ファイルは、github.comのリポジトリのREADME.mdも兼ねるので整合性を考慮し編集する。 コンテンツ 目次ファイルSUMMARY.mdとのリンクを考慮し、コンテンツファイルを作成・編集する。 スタイルシート 必要に応じ、スタイルシート（cssファイル）を作成する。 以下はサンプル （デフォルトのcssでは、h1とh2のスタイルが区別しづらいため、h1にアンダーラインを付加しを区別しやすくする） > mkdir styles > echo \"h1 { border-bottom: 2px solid #000; padding-bottom:3px;}\" > styles/website.css > echo \"h1 { border-bottom: 2px solid #000; padding-bottom:3px;}\" > styles/pdf.css > echo \"h1 { border-bottom: 2px solid #000; padding-bottom:3px;}\" > styles/epub.css プラグインの適用 必要に応じ、プラグインを適用する。詳細については次章参照。 "},"src/md/chpt0500.html":{"url":"src/md/chpt0500.html","title":"プラグインのインストール","keywords":"","body":"プラグインのインストール 作成するGitBookに機能を追加するためのプラグインが、ノードモジュールとして用意されているので、必要に応じプラグインをインストールする。 ノードモジュールとは、Node.jsでnpmコマンドを使用してインストールすることで利用できる便利な機能が実装済みのモジュールである。 適用したいプラグインを「book.json」ファイルに記述し、インストールコマンドを実行することでインストールを行う。 { \"plugins\": [\"\"] } 適用プラグインの記述例 プロジェクト直下の「book.json」ファイルに適用したいプラグインを列挙する。 { \"title\": \"hoge User's Guide\", \"description\": \"\", \"language\": \"ja\", \"plugins\": [ ← pluginsセクション内に列挙する。 \"hide-published-with\", （カンマに注意-最後は付けないなど） \"-sharing\", \"-lunr\", \"-search\", \"search-pro-kui\", \"expandable-chapters\", \"theme-synerex\" ], ： ： } NPM公式サイト（URL: https://www.npmjs.com/ ）の各プラグイン詳細を参考に設定すること。 プラグインのインストール コマンドプロンプトで以下のコマンドを実行し、プラグインをインストールする。 > gitbook install 推奨プラグイン Published with Gitbook を消す デフォルト状態で表示されている Published with Gitbook を消したい場合、hide-published-with のプラグインを使用する。 { \"plugins\": [\"hide-published-with\"], } Twitter や Facebook などのアイコンを消す デフォルト状態で表示されている SNS のシェアアイコンを消したい場合、プラグインで -sharing を指定する。 { \"plugins\": [\"-sharing\"], } 個別に表示・非表示を設定することも可能。 https://www.npmjs.com/package/gitbook-plugin-sharing フォント、色テーマ変更アイコンを表示 フォント、色テーマを変更するためのアイコンを表示したい場合、プラグインで -lunr を指定する。 { \"plugins\": [\"-lunr\"], } 検索を無効にする デフォルトで表示されている検索窓を消したい場合、プラグインで -search を指定する。(日本語検索したいときは次項推奨。「日本語での検索を可能にする」と排他使用) { \"plugins\": [\"-sharing\"], } 日本語での検索を可能にする GitBook標準の検索機能では使いづらい、日本語検索を行いたい場合、プラグインで search-pro-kui を指定する。（前項「検索を無効にする」と排他使用） { \"plugins\": [\"search-pro-kui\"], } チャプターごと折り畳み／展開を可能にする チャプターごと折り畳み／展開を可能にしたい場合、プラグインで expandable-chapters を指定する。 { plugins: [\"expandable-chapters\"] } "},"src/md/chpt0600.html":{"url":"src/md/chpt0600.html","title":"GitBookファイル生成","keywords":"","body":"GitBookファイル生成 GitBookファイル生成方法を以下に示す。 ビルド 作成したMarkdownコンテンツファイルを、GitBookとして扱えるファイルに生成するためビルドを行う。ビルド結果は任意のフォルダに格納可能であるが、本書では、github.comのリポジトリの関係で、「docs」フォルダを例として記述する。 コマンドプロンプトで以下のコマンドを実行し、プロジェクトをビルドする。 > gitbook build ./ ./docs アクセス権に係るエラーになる場合は再度実施することで解消する場合がある。（ビルド中やデバッグ中は、docsフォルダ内のファイルに排他制限がかかるため、タイミングによってはエラーとなる場合がある） 既存コンテンツ変更後など、ビルド忘れによるGitBookページへの反映もれがないよう、GitHubへのコミット前に必ず実施しておくこと。 デバッグ（LAN内公開） websiteでの公開に先立ち、ローカル環境で表示確認を行うため、以下のコマンドを実行する。 > gitbook serve ./ ./docs アクセス権に係るエラーになる場合は再度実施することで解消する場合がある。（詳細は前項参照） ブラウザより、以下にアクセスし、GitBookページを確認する http://localhost:4000/ ebook形式ファイル作成 作成したMarkdownコンテンツファイルをebook形式ファイル形式で出力する場合は、以下のコマンド実行する。 > gitbook help ← コマンドの詳細を調べたい場合 > gitbook pdf ← pdfファイル出力の場合 > gitbook epub ← epubファイル出力の場合 > gitbook mobi ← mobiファイル出力の場合 "},"src/md/chpt0700.html":{"url":"src/md/chpt0700.html","title":"website公開","keywords":"","body":"website公開 作成したGitBookコンテンツをwebsiteとして公開するために、github.comの公開リポジトリ※として登録する。 ※github有料ユーザの場合、公開リポジトリでなくてもよい場合がある Git追跡非対象ファイル定義 .gitignore は、Git による追跡対象としないファイルを指定するための設定ファイルである。 必要に応じ.gitignore を設定する。以下はサンプル。 /node_modules /book.pdf /book.epub /book.mobi GitHubへのコミット ビルド済みのGitBookプロジェクトを、github.comの公開リポジトリのmasterブランチとしてコミットする。 Gitリポジトリの公開設定 Gitリポジトリの公開設定を行う。 公開リポジトリであることを確認する。 Private表示がないこと。 Private表示がある場合、設定画面「Danger Zone」項目にて公開リポジトリに変更する。 リポジトリの「Settings」を選択し、設定画面を表示する。 画面を下へスクロールし、「GitHub Pages」項目を表示 公開リンクを書き留める（リポジトリ内容に誤りがある場合、正しく表示されないので内容を見直すこと。（例：8.3形式ファイル名でない、必須ファイルがない、etc.）） 「Source」項目から、「master branch /docs folder」を選択 ブラウザでGitBookを表示 前項にて書き留めておいた公開リンクをブラウザで表示する。ページ反映までに数分程度のタイムラグがある。 "},"src/md/chpt5000.html":{"url":"src/md/chpt5000.html","title":"付録1．ノードモジュールの作成・登録","keywords":"","body":"付録1．ノードモジュールの作成・登録 本章では、GitBookブラグイン（ノードモジュール）のGitBookテーマの作成手順について記述する。 本手順では、GitHubを介した登録手順としているが、いろいろな手順が存在するので一例として記述するものである。 githubに登録用リポジトリを用意する。（Private属性でもOK） NPMリポジトリ（プロジェクト）内のpackage.json ファイルにgithub登録するURLを記述する。 git commit、npm publishを実行する。 NPM側で、package.json ファイル内容に従い、該当するgithubリポジトリにリンクする。 NPMモジュールプロジェクト初期化 コマンドプロンプトで以下のコマンドを実行し、NPMモジュールプロジェクトを作成する。 https://www.npmjs.com/ にて、プロジェクト名が使われていない事を事前に確認しておくこと。 > mkdir gitbook-plugin-hoge ← プロジェクト フォルダの作成 > cd gitbook-plugin-hoge ← カレント移動 > npm init ← プロジェクト初期化（コマンド実行後、適宜情報入力する） 処理終了後、前項に従い、バージョンが正しく表示されることを確認する。 NPMモジュールの作成 適宜NPMモジュールを作成する。 以下コマンドで、NPMに公開されているモジュールをダウンロードしサンプルとして流用することも可能。 > npm install [param] 作成方法の詳細については省略。 GitHubへのコミット 作成したプロジェクトをGitHubへCommitする。 Commit前にソースコードなど公開したくないファイル、ディレクトリ等を.gitignoreに定義しておくこと。 NPMモジュールの公開 > npm publish －以上－ "}}